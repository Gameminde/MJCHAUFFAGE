#!/usr/bin/env node

/**
 * Script de test de s√©curit√© pour valider les am√©liorations
 * √Ä ex√©cuter apr√®s l'impl√©mentation des corrections
 */

const axios = require('axios');
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

class SecurityTester {
  constructor(baseUrl = 'http://localhost:3001') {
    this.baseUrl = baseUrl;
    this.testResults = [];
  }

  async runAllTests() {
    log('üîí TESTS DE S√âCURIT√â - MJ CHAUFFAGE', 'blue');
    log('=' .repeat(50), 'blue');

    await this.testServerHealth();
    await this.testRateLimiting();
    await this.testSecurityHeaders();
    await this.testAuthenticationSecurity();
    await this.testInputValidation();
    await this.testUnauthorizedAccess();

    this.printSummary();
  }

  async testServerHealth() {
    log('\nüìä Test de sant√© du serveur...', 'yellow');
    
    try {
      const response = await axios.get(`${this.baseUrl}/health`);
      
      if (response.status === 200 && response.data.status === 'OK') {
        log('‚úÖ Serveur op√©rationnel', 'green');
        this.testResults.push({ test: 'Server Health', status: 'PASS' });
      } else {
        log('‚ùå Serveur non op√©rationnel', 'red');
        this.testResults.push({ test: 'Server Health', status: 'FAIL' });
      }
    } catch (error) {
      log(`‚ùå Erreur de connexion: ${error.message}`, 'red');
      this.testResults.push({ test: 'Server Health', status: 'FAIL', error: error.message });
    }
  }

  async testRateLimiting() {
    log('\nüö¶ Test du rate limiting...', 'yellow');
    
    try {
      const requests = [];
      
      // Envoyer 10 requ√™tes rapidement
      for (let i = 0; i < 10; i++) {
        requests.push(
          axios.get(`${this.baseUrl}/api/products`).catch(err => err.response)
        );
      }
      
      const responses = await Promise.all(requests);
      const rateLimited = responses.some(res => res && res.status === 429);
      
      if (rateLimited) {
        log('‚úÖ Rate limiting fonctionnel', 'green');
        this.testResults.push({ test: 'Rate Limiting', status: 'PASS' });
      } else {
        log('‚ö†Ô∏è  Rate limiting non d√©tect√© (peut √™tre normal)', 'yellow');
        this.testResults.push({ test: 'Rate Limiting', status: 'WARNING' });
      }
    } catch (error) {
      log(`‚ùå Erreur test rate limiting: ${error.message}`, 'red');
      this.testResults.push({ test: 'Rate Limiting', status: 'FAIL', error: error.message });
    }
  }

  async testSecurityHeaders() {
    log('\nüõ°Ô∏è  Test des headers de s√©curit√©...', 'yellow');
    
    try {
      const response = await axios.get(`${this.baseUrl}/health`);
      const headers = response.headers;
      
      const securityHeaders = [
        'x-content-type-options',
        'x-frame-options',
        'x-xss-protection',
        'strict-transport-security'
      ];
      
      let headerCount = 0;
      securityHeaders.forEach(header => {
        if (headers[header]) {
          log(`  ‚úÖ ${header}: ${headers[header]}`, 'green');
          headerCount++;
        } else {
          log(`  ‚ùå ${header}: manquant`, 'red');
        }
      });
      
      if (headerCount >= 3) {
        log('‚úÖ Headers de s√©curit√© pr√©sents', 'green');
        this.testResults.push({ test: 'Security Headers', status: 'PASS' });
      } else {
        log('‚ùå Headers de s√©curit√© insuffisants', 'red');
        this.testResults.push({ test: 'Security Headers', status: 'FAIL' });
      }
    } catch (error) {
      log(`‚ùå Erreur test headers: ${error.message}`, 'red');
      this.testResults.push({ test: 'Security Headers', status: 'FAIL', error: error.message });
    }
  }

  async testAuthenticationSecurity() {
    log('\nüîê Test de s√©curit√© d\'authentification...', 'yellow');
    
    try {
      // Test 1: Acc√®s sans token
      try {
        await axios.get(`${this.baseUrl}/api/admin/dashboard/stats`);
        log('‚ùå Acc√®s admin sans authentification possible', 'red');
        this.testResults.push({ test: 'Auth Protection', status: 'FAIL' });
      } catch (error) {
        if (error.response && error.response.status === 401) {
          log('‚úÖ Acc√®s admin prot√©g√©', 'green');
          this.testResults.push({ test: 'Auth Protection', status: 'PASS' });
        } else {
          throw error;
        }
      }

      // Test 2: Token invalide
      try {
        await axios.get(`${this.baseUrl}/api/admin/dashboard/stats`, {
          headers: { 'Authorization': 'Bearer invalid-token' }
        });
        log('‚ùå Token invalide accept√©', 'red');
        this.testResults.push({ test: 'Invalid Token', status: 'FAIL' });
      } catch (error) {
        if (error.response && error.response.status === 401) {
          log('‚úÖ Token invalide rejet√©', 'green');
          this.testResults.push({ test: 'Invalid Token', status: 'PASS' });
        } else {
          throw error;
        }
      }

      // Test 3: Tentative de connexion avec credentials invalides
      try {
        await axios.post(`${this.baseUrl}/api/auth/login`, {
          email: 'invalid@test.com',
          password: 'wrongpassword'
        });
        log('‚ùå Credentials invalides accept√©s', 'red');
        this.testResults.push({ test: 'Invalid Credentials', status: 'FAIL' });
      } catch (error) {
        if (error.response && error.response.status === 401) {
          log('‚úÖ Credentials invalides rejet√©s', 'green');
          this.testResults.push({ test: 'Invalid Credentials', status: 'PASS' });
        } else {
          throw error;
        }
      }

    } catch (error) {
      log(`‚ùå Erreur test authentification: ${error.message}`, 'red');
      this.testResults.push({ test: 'Authentication Security', status: 'FAIL', error: error.message });
    }
  }

  async testInputValidation() {
    log('\n‚úÖ Test de validation des entr√©es...', 'yellow');
    
    try {
      // Test avec donn√©es malform√©es
      const maliciousInputs = [
        { email: '<script>alert("xss")</script>', password: 'test' },
        { email: 'test@test.com', password: '' },
        { email: '', password: 'password' },
        { email: 'not-an-email', password: 'password' }
      ];

      let validationWorks = true;

      for (const input of maliciousInputs) {
        try {
          await axios.post(`${this.baseUrl}/api/auth/login`, input);
          validationWorks = false;
          log(`‚ùå Entr√©e malform√©e accept√©e: ${JSON.stringify(input)}`, 'red');
        } catch (error) {
          if (error.response && error.response.status === 400) {
            log(`‚úÖ Entr√©e malform√©e rejet√©e: ${input.email}`, 'green');
          }
        }
      }

      if (validationWorks) {
        this.testResults.push({ test: 'Input Validation', status: 'PASS' });
      } else {
        this.testResults.push({ test: 'Input Validation', status: 'FAIL' });
      }

    } catch (error) {
      log(`‚ùå Erreur test validation: ${error.message}`, 'red');
      this.testResults.push({ test: 'Input Validation', status: 'FAIL', error: error.message });
    }
  }

  async testUnauthorizedAccess() {
    log('\nüö´ Test d\'acc√®s non autoris√©...', 'yellow');
    
    const protectedRoutes = [
      '/api/admin/dashboard/stats',
      '/api/admin/orders',
      '/api/admin/customers',
      '/api/admin/technicians',
      '/api/admin/settings'
    ];

    let protectionWorks = true;

    for (const route of protectedRoutes) {
      try {
        await axios.get(`${this.baseUrl}${route}`);
        log(`‚ùå Route non prot√©g√©e: ${route}`, 'red');
        protectionWorks = false;
      } catch (error) {
        if (error.response && error.response.status === 401) {
          log(`‚úÖ Route prot√©g√©e: ${route}`, 'green');
        } else {
          log(`‚ö†Ô∏è  Erreur inattendue sur ${route}: ${error.response?.status}`, 'yellow');
        }
      }
    }

    if (protectionWorks) {
      this.testResults.push({ test: 'Route Protection', status: 'PASS' });
    } else {
      this.testResults.push({ test: 'Route Protection', status: 'FAIL' });
    }
  }

  printSummary() {
    log('\n' + '='.repeat(50), 'blue');
    log('üìä R√âSUM√â DES TESTS DE S√âCURIT√â', 'blue');
    log('='.repeat(50), 'blue');

    const passed = this.testResults.filter(r => r.status === 'PASS').length;
    const failed = this.testResults.filter(r => r.status === 'FAIL').length;
    const warnings = this.testResults.filter(r => r.status === 'WARNING').length;
    const total = this.testResults.length;

    log(`\nR√©sultats: ${passed}/${total} tests r√©ussis`, passed === total ? 'green' : 'yellow');
    
    if (failed > 0) {
      log(`‚ùå √âchecs: ${failed}`, 'red');
    }
    
    if (warnings > 0) {
      log(`‚ö†Ô∏è  Avertissements: ${warnings}`, 'yellow');
    }

    log('\nD√©tails:', 'blue');
    this.testResults.forEach(result => {
      const icon = result.status === 'PASS' ? '‚úÖ' : result.status === 'FAIL' ? '‚ùå' : '‚ö†Ô∏è';
      const color = result.status === 'PASS' ? 'green' : result.status === 'FAIL' ? 'red' : 'yellow';
      log(`${icon} ${result.test}: ${result.status}`, color);
      if (result.error) {
        log(`   Erreur: ${result.error}`, 'red');
      }
    });

    // Recommandations
    log('\nüéØ RECOMMANDATIONS:', 'blue');
    
    if (failed === 0 && warnings <= 1) {
      log('‚úÖ S√©curit√© excellente ! Le site est pr√™t pour la production.', 'green');
    } else if (failed <= 2) {
      log('‚ö†Ô∏è  S√©curit√© correcte mais des am√©liorations sont possibles.', 'yellow');
    } else {
      log('‚ùå Probl√®mes de s√©curit√© d√©tect√©s. Corrections n√©cessaires avant production.', 'red');
    }

    log('\nüìã Prochaines √©tapes:', 'blue');
    log('1. Corriger les tests √©chou√©s', 'blue');
    log('2. Configurer les variables d\'environnement de production', 'blue');
    log('3. Activer HTTPS en production', 'blue');
    log('4. Configurer un syst√®me de monitoring', 'blue');
  }
}

// Ex√©cution du script
if (require.main === module) {
  const tester = new SecurityTester();
  
  console.log('üöÄ D√©marrage des tests de s√©curit√©...\n');
  
  tester.runAllTests()
    .then(() => {
      console.log('\n‚ú® Tests de s√©curit√© termin√©s !');
      process.exit(0);
    })
    .catch(error => {
      console.error('\nüí• Erreur fatale:', error);
      process.exit(1);
    });
}
