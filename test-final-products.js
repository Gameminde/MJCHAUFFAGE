const axios = require('axios');

async function testFinalProducts() {
    console.log('üéØ TEST FINAL - PAGES PRODUCTS RECR√â√âES');
    console.log('='.repeat(50));
    
    try {
        // 1. V√©rifier l'API
        console.log('\nüì¶ √âtape 1: V√©rification API');
        const apiResponse = await axios.get('http://localhost:3001/api/products');
        console.log('‚úÖ API Status:', apiResponse.status);
        console.log('üìä Produits dans l\'API:', apiResponse.data.data.products.length);
        
        if (apiResponse.data.data.products.length > 0) {
            console.log('üìã Produits disponibles:');
            apiResponse.data.data.products.forEach((product, index) => {
                console.log(`  ${index + 1}. ${product.name} - ${product.price} DA (${product.category} - ${product.brand})`);
            });
        }
        
        // 2. Attendre que Next.js recompile
        console.log('\n‚è≥ √âtape 2: Attente recompilation Next.js...');
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // 3. Tester la page
        console.log('\nüåê √âtape 3: Test page frontend');
        try {
            const pageResponse = await axios.get('http://localhost:3000/fr/products');
            console.log('‚úÖ Page accessible:', pageResponse.status);
            
            // V√©rifier le contenu
            const html = pageResponse.data;
            const hasLoadingText = html.includes('Chargement des produits');
            const hasProductsText = html.includes('produits disponibles');
            const hasNoProductsText = html.includes('Aucun produit disponible');
            
            console.log('üîç Analyse du contenu:');
            console.log('  - Texte de chargement:', hasLoadingText);
            console.log('  - Texte produits:', hasProductsText);
            console.log('  - Texte aucun produit:', hasNoProductsText);
            
        } catch (error) {
            if (error.response?.status === 500) {
                console.log('‚ùå Erreur 500 - Probl√®me de compilation');
                console.log('   Attendez que Next.js finisse la recompilation...');
            } else {
                console.log('‚ùå Erreur page:', error.message);
            }
        }
        
        // 4. Test de l'URL alternative
        console.log('\nüîÑ √âtape 4: Test URL /fr/produits (redirection)');
        try {
            const redirectResponse = await axios.get('http://localhost:3000/fr/produits');
            console.log('‚úÖ Redirection fonctionne:', redirectResponse.status);
        } catch (error) {
            console.log('‚ùå Erreur redirection:', error.response?.status || error.message);
        }
        
        console.log('\nüéØ PAGES RECR√â√âES:');
        console.log('1. ‚úÖ ClientProductsPage.tsx - Composant client avec gestion d\'√©tat');
        console.log('2. ‚úÖ page.tsx - Page serveur simple qui appelle le composant client');
        console.log('3. ‚úÖ Gestion des √©tats: loading, error, success');
        console.log('4. ‚úÖ Affichage des produits avec cat√©gorie et marque');
        console.log('5. ‚úÖ Message si aucun produit disponible');
        
        console.log('\nüìã INSTRUCTIONS FINALES:');
        console.log('1. Attendez que Next.js finisse la recompilation (peut prendre 30s)');
        console.log('2. Ouvrez http://localhost:3000/fr/products');
        console.log('3. Vous devriez voir un spinner puis les produits');
        console.log('4. Cr√©ez un produit dans l\'admin et rechargez la page');
        console.log('5. Le nouveau produit devrait appara√Ætre imm√©diatement');
        
        console.log('\nüîç SI PROBL√àME PERSISTE:');
        console.log('- V√©rifiez la console du navigateur (F12)');
        console.log('- V√©rifiez l\'onglet Network pour l\'appel API');
        console.log('- Red√©marrez le serveur Next.js si n√©cessaire');
        
    } catch (error) {
        console.error('‚ùå ERREUR:', error.message);
    }
}

testFinalProducts();
